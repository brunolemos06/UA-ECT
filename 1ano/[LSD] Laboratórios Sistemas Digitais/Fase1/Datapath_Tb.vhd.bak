library IEEE;
use IEEE.STD_LOGIC_1164.all;
-- Entidade sem portos
entity Datapath_Tb is
end Datapath_Tb;
architecture Stimulus of Datapath_Tb is
 
 --sinais para ligar as entradas do datapath
	signal s_clk      : std_logic;    
	signal s_reset    : std_logic:= '1';  
	signal s_EnPc     : std_logic;  
	signal s_RI       : std_logic;   
	signal s_RegWr    : std_logic;   
	signal s_RegDst   : std_logic;   
	signal s_ALUSrc   : std_logic;   
	signal s_ALUOp    : std_logic_vector(3 downto 0);   
	signal s_MemWr    : std_logic;   
	signal s_MemtoReg : std_logic; 
	signal s_opcode   : std_logic_vector(2 downto 0); 
	signal s_func     : std_logic_vector(3 downto 0);

	
	signal state      : integer:= 0;
	constant clk_period : time := 50 ns;
begin
 -- Instanciação da datapath
 datapath: entity work.Datapath(Structural)
 
 port map(
			   clk      => s_clk,
				reset    => s_reset,
				EnPc     => s_EnPc,
			   RI       => s_RI,
			   RegWr    => s_RegWr,
				RegDst   => s_RegDst,
				ALUSrc   => s_ALUSrc,
				ALUOp    => s_ALUOp,
				MemWr    => s_MemWr,
				MemtoReg => s_MemtoReg,
				opcode   => s_opcode,
				func     => s_func
			);


 --Process clock
 clk_proc : process
 begin
	s_clk <= '0';
	wait for clk_period/2;
	s_clk <= '1';
	wait for clk_period/2;
 end process;
 
 
 
 --Process stim
 stim_proc : process(s_clk)
 begin
   s_reset    <= '0';
	s_EnPc     <= '0';    
	s_RI       <= '0'; 
	s_RegWr    <= '0'; 
	s_RegDst   <= '0';  
	s_ALUSrc   <= '0'; 
	s_ALUOp    <= "0000"; 
	s_MemWr    <= '0';
	s_MemtoReg <= '0';

	if (falling_edge(s_clk)) then
	
	   if (state = 0) then -- fetch 0
				s_RI <='1';
				state <= 1;
			
					elsif (state = 1) then -- fetch 1
				s_RI <= '0';
				s_EnPC <= '1';
				state <= 2;
				
		elsif (state = 2) then -- decode
			
				case s_opcode is
					when "111"  =>
						s_RegDst   <= '1'; 
						s_ALUSrc   <= '1';
						s_ALUOp    <= "000"; 
						s_MemtoReg <= '1';
						state <= 4;

					when "110"  =>
						s_ALUOp    <= s_func; 
						state <= 3;
						
					when "001" =>
						state <= 4;
						
					when others =>
						s_EnPc     <= '0';    
						s_RI       <= '0'; 
						s_RegWr    <= '0'; 
						s_RegDst   <= '0';  
						s_ALUSrc   <= '0'; 
						s_ALUOp    <= "0000"; 
						s_MemWr    <= '0';
						s_MemtoReg <= '0';
						s_reset    <= '1';
						
				end case;
			
			elsif (state = 3) then -- memory update
				s_MemWr     <= '1';
				state <= 0;
				
			elsif (state = 4) then -- reg update
				 s_RegWr    <= '1';
				 state <= 0;
			else
				state <= 0;
		end if;
		
	end if;
	
 end process;
end Stimulus; 